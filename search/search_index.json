{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"clipse Documentation","text":"<p>Spec-first CLI engine to design, validate, and generate CLIs from a single configuration file.</p> <p>Quick links:</p> <ul> <li>Getting started</li> <li>Installing</li> <li>Configuring</li> <li>Troubleshooting</li> <li>Schemas</li> </ul>"},{"location":"clipse_config_file_guide/","title":"Clipse config file guide","text":"<p>NOTE: This guide is being consolidated into the new Getting started \u2192 Configuring docs. Prefer: getting-started/configuring.md and docs/schema/index.md for schemas.</p>"},{"location":"clipse_config_file_guide/#clipse-config-objects-actions-authoring-guide","title":"Clipse Config: Objects &amp; Actions \u2013 Authoring Guide","text":"<p>Author CLI specs that are style\u2011agnostic and map cleanly to noun\u2013verb, verb\u2013noun, unix, or shell renderings. Schema target: <code>https://github.com/msat1971/clipse/blob/develop/schema/clipse.schema.1.0.0.json</code></p>"},{"location":"clipse_config_file_guide/#1-shape-of-the-document","title":"1) Shape of the Document","text":"<ul> <li>Map\u2011based: IDs are the keys for <code>objects</code>, <code>actions</code>, and their <code>options</code>/<code>positionals</code>.</li> <li><code>shared_defs</code> provide reusable blueprints; items there have no ids.</li> <li><code>global.options</code> is a map of true global flags/options.</li> </ul> <pre><code>{\n  \"title\": \"Example configuration file\",\n  \"clipse_version\": \"https://github.com/msat1971/clipse/blob/develop/schema/clipse.schema.1.0.0.json\",\n  \"shared_defs\": { ... },\n  \"global\": { \"options\": { ... } },\n  \"behavior\": { ... },\n  \"objects\": { ... },\n  \"actions\": { ... }\n}\n</code></pre>"},{"location":"clipse_config_file_guide/#objects-yaml","title":"Objects (YAML)","text":"<pre><code>objects:\n  foo:\n    names: [\"foo\"]\n    description_short: \"Manage foo(s).\"\n    default_action: list\n    actions:\n      create:\n        $ref: \"#/shared_defs/actions/create\"\n        options:\n          name:\n            names: [\"-n\",\"--name\"]\n            kind: option\n            takes_value: true\n            type: string\n            required: true\n      delete:\n        $ref: \"#/shared_defs/actions/delete\"\n        positionals:\n          foo_ref:\n            name: FOO\n            kind: positional\n            type: string\n            required: true\n</code></pre>"},{"location":"clipse_config_file_guide/#actions-json","title":"Actions (JSON)","text":"<pre><code>{\n  \"actions\": {\n    \"list\": {\n      \"names\": [\"list\",\"ls\"],\n      \"description_short\": \"List object(s).\",\n      \"objects\": {\n        \"foo\": { \"description_short\": \"Lists foo(s)\" },\n        \"bar\": { \"description_short\": \"Lists bar(s)\" }\n      },\n      \"default_object\": \"foo\"\n    }\n  }\n}\n</code></pre>"},{"location":"clipse_config_file_guide/#2-ref-overrides-and-merging","title":"2) <code>$ref</code>, Overrides, and Merging","text":"<ul> <li><code>$ref</code> pulls from <code>shared_defs</code> and you may override fields at the use site.</li> <li>Shallow merge for scalars/objects.</li> <li>Map fields (<code>options</code>, <code>positionals</code>, <code>actions</code>, <code>objects</code>) merge by key with the use\u2011site winning on conflicts.</li> </ul> <pre><code>{\n  \"objects\": {\n    \"foo\": {\n      \"actions\": {\n        \"delete\": {\n          \"$ref\": \"#/shared_defs/actions/delete\",\n          \"description_short\": \"Delete a foo.\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"clipse_config_file_guide/#3-variables","title":"3) Variables (<code>{{ ... }}</code>)","text":"<ul> <li>Strings may use <code>{{path}}</code> expressions, e.g., <code>{{id}}</code>, <code>{{vars.cmd_name}}</code>.</li> <li>Lookup order: current scope \u2192 <code>shared_defs.vars</code>.</li> <li>Resolve before validation of those fields; detect cycles.</li> </ul>"},{"location":"clipse_config_file_guide/#4-types-environment-variables","title":"4) Types &amp; Environment Variables","text":"<p>Types</p> <pre><code>{ \"type\": \"string\" }\n{ \"type\": { \"kind\": \"enum\", \"values\": [\"basic\",\"web\",\"api\"] } }\n{ \"type\": { \"kind\": \"list\", \"of\": { \"kind\": \"path\" } } }\n</code></pre> <p>Environment binding</p> <pre><code>\"env\": \"YOURCLI_DIR\"\n</code></pre> <p>equals</p> <pre><code>\"env\": { \"var\": \"YOURCLI_DIR\", \"override_cli\": false, \"update\": false }\n</code></pre> <p>Precedence</p> <p>1) env (if <code>override_cli=true</code> and set) \u2192 2) CLI value \u2192 3) env (if set) \u2192 4) <code>default</code> \u2192 5) missing.</p> <p>If <code>env.update=true</code>, set the environment variable to the final value.</p>"},{"location":"clipse_config_file_guide/#5-constraints-idbased","title":"5) Constraints (ID\u2011based)","text":"<p>Reference only map keys in the same scope:</p> <pre><code>{\n  \"requires\": [\"name\"],\n  \"conflicts\": [[\"from_config\",\"template\"],[\"from_config\",\"extra_files\"]],\n  \"exactly_one_of\": [[\"template\",\"from_config\"]],\n  \"at_least_one_of\": [[\"dir\",\"from_config\"]]\n}\n</code></pre>"},{"location":"clipse_config_file_guide/#6-loader-order-checks","title":"6) Loader: Order &amp; Checks","text":"<p>Order</p> <ol> <li>Resolve <code>$ref</code>; shallow merge; maps by key (use\u2011site wins).</li> <li>Resolve <code>{{...}}</code> variables with scope \u2192 <code>shared_defs.vars</code> (recurse until stable).</li> <li>Build unions:</li> <li><code>OBJECTS = keys(objects) \u222a keys(actions[].objects) \u222a keys(shared_defs.objects used)</code></li> <li><code>ACTIONS = keys(actions) \u222a keys(objects[].actions) \u222a keys(shared_defs.actions used)</code></li> <li>Validate defaults (<code>default_action</code>/<code>default_object</code> exist).</li> <li>Resolve values (env/CLI/default precedence; apply <code>env.update</code>).</li> <li>Type checks (incl. constraints).</li> <li>Constraint checks (IDs exist in scope).</li> <li>Schema validation against clipse.schema.1.0.0.json.</li> </ol> <p>Integrity checks</p> <ul> <li>Unknown <code>$ref</code>, duplicate keys after merge.</li> <li>Circular variables.</li> <li>Missing defaults.</li> <li>Constraints targeting unknown ids.</li> </ul>"},{"location":"clipse_config_file_guide/#7-global-options-yaml-json","title":"7) Global Options (YAML &amp; JSON)","text":"<pre><code>global:\n  options:\n    help:\n      names: [\"-h\",\"--help\",\"?\"]\n      kind: flag\n      takes_value: false\n      type: boolean\n      description_short: Show help.\n    verbose:\n      names: [\"-v\",\"--verbose\"]\n      kind: flag\n      takes_value: false\n      type: count\n      description_short: Increase verbosity.\n</code></pre> <pre><code>{\n  \"global\": {\n    \"options\": {\n      \"help\":    { \"names\": [\"-h\",\"--help\",\"?\"], \"kind\":\"flag\", \"takes_value\": false, \"type\":\"boolean\", \"description_short\":\"Show help.\" },\n      \"version\": { \"names\": [\"--version\"], \"kind\":\"flag\", \"takes_value\": false, \"type\":\"boolean\", \"description_short\":\"Show version and exit.\" }\n    }\n  }\n}\n</code></pre>"},{"location":"clipse_config_file_guide/#8-rendering-out-of-scope","title":"8) Rendering (out of scope)","text":"<ul> <li>noun\u2013verb / verb\u2013noun / unix / shell are projections from the object/action unions. Keep configs style\u2011neutral.</li> </ul>"},{"location":"getting-started/","title":"Getting started","text":"<p>New to Dclipse? Start here.</p> <ul> <li>What Dclipse is and why it\u2019s useful: see the project README.</li> <li>Install: pick PyPI (when available) or install from source.</li> <li>Configure: author a core configuration JSON/YAML and optional <code>.dclipse</code> style file.</li> <li>Troubleshoot: common pitfalls and fixes.</li> </ul> <p>Next:</p> <ul> <li>Installing \u2192 installing.md</li> <li>Configuring \u2192 configuring.md</li> <li>Troubleshooting \u2192 troubleshooting.md</li> </ul>"},{"location":"getting-started/configuring/","title":"Configuring","text":"<p>Configure Dclipse with two inputs:</p> <ul> <li>Core configuration (JSON or YAML) that describes objects, actions, parameters, and constraints.</li> <li>Optional style file (Python or declarative JSON/YAML) to shape CLI UX conventions.</li> </ul>"},{"location":"getting-started/configuring/#core-configuration-jsonyaml","title":"Core configuration (JSON/YAML)","text":"<ul> <li>Always supported: JSON</li> <li>YAML supported when <code>PyYAML</code> is installed</li> <li>Validated against the core schema: see Schemas</li> </ul> <p>Minimal JSON example (excerpt):</p> <pre><code>{\n  \"objects\": {\n    \"project\": {\n      \"actions\": { \"init\": {}, \"status\": {} }\n    }\n  }\n}\n</code></pre> <p>Programmatic load:</p> <pre><code>from dclipse import load_config\ncfg = load_config(\"./examples/example_config.json\")\n</code></pre> <p>Validate and explain:</p> <pre><code>dclipse validate --config ./examples/example_config.json\ndclipse explain --config ./examples/example_config.json --format json\n</code></pre>"},{"location":"getting-started/configuring/#style-file-optional","title":"Style file (optional)","text":"<p>You can control naming, option prefixes, help layout, etc., via a style.</p> <ul> <li>Option A: Python style module <code>.dclipse_style.py</code> exporting <code>render(...)</code></li> <li>Option B: Declarative <code>.dclipse_style.json|.yaml|.yml</code> validated against the style schema</li> </ul> <p>Discovery order (see <code>src/dclipse/style_loader.py</code>):</p> <ol> <li><code>--style-file</code> flag to <code>dclipse generate</code></li> <li><code>DCLIPSE_STYLE_FILE</code> environment variable</li> <li><code>.dclipse_style.py</code> or <code>.dclipse_style.(json|yaml|yml)</code> at repo root (git root preferred)</li> </ol> <p>List available styles:</p> <pre><code>dclipse list-styles\n</code></pre> <p>Use a style during generation:</p> <pre><code>dclipse generate --config ./examples/example_config.json \\\n  --out ./generated_cli --style-file ./.dclipse_style.py\n</code></pre> <p>See schema details at Schemas.</p>"},{"location":"getting-started/installing/","title":"Installing","text":"<p>Clipse will be published to PyPI once stable. Until then, install from source.</p>"},{"location":"getting-started/installing/#option-a-pypi-planned","title":"Option A: PyPI (planned)","text":"<pre><code>pip install clipse\n</code></pre>"},{"location":"getting-started/installing/#option-b-from-source-editable","title":"Option B: From source (editable)","text":"<pre><code>git clone https://github.com/msat1971/clipse.git\ncd clipse\npython -m venv .venv &amp;&amp; . .venv/bin/activate\npip install -U pip\npip install -e '.[dev]'\n</code></pre>"},{"location":"getting-started/installing/#verify-installation","title":"Verify installation","text":"<pre><code>clipse --help\n</code></pre> <p>If the command is not found, ensure your virtualenv is activated or your PATH includes the environment's bin directory.</p>"},{"location":"getting-started/troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and how to resolve them.</p>"},{"location":"getting-started/troubleshooting/#command-not-found-dclipse","title":"Command not found: <code>dclipse</code>","text":"<ul> <li>Ensure your virtual environment is activated.</li> <li>On Windows, use <code>Scripts\\\\activate</code>; on Unix/macOS, <code>. .venv/bin/activate</code>.</li> <li>Verify install: <code>pip show dclipse</code> or <code>pip list | grep dclipse</code>.</li> </ul>"},{"location":"getting-started/troubleshooting/#yaml-not-supported-errors","title":"YAML not supported errors","text":"<ul> <li>Install PyYAML: <code>pip install PyYAML</code></li> <li>Or use JSON for configuration and style files.</li> </ul>"},{"location":"getting-started/troubleshooting/#schema-validation-failures","title":"Schema validation failures","text":"<ul> <li>Ensure your config conforms to the core schema.</li> <li>See schemas at: Schemas</li> <li>Use <code>dclipse validate --config &lt;path&gt;</code> and read the error path and message.</li> </ul>"},{"location":"getting-started/troubleshooting/#style-file-not-discovered","title":"Style file not discovered","text":"<ul> <li>Check discovery order in <code>src/dclipse/style_loader.py</code>.</li> <li>Pass <code>--style-file</code> explicitly or set <code>DCLIPSE_STYLE_FILE</code>.</li> <li>Place <code>.dclipse_style.*</code> at the git repo root.</li> </ul>"},{"location":"getting-started/troubleshooting/#generation-produced-files-but-cli-fails-to-run","title":"Generation produced files but CLI fails to run","text":"<ul> <li>Ensure you added an entry point (<code>[project.scripts]</code> or <code>console_scripts</code>).</li> <li>Confirm Python version compatibility (see README badges).</li> <li>Inspect generated <code>adapter.py</code> and register your handler correctly.</li> </ul>"},{"location":"getting-started/troubleshooting/#still-stuck","title":"Still stuck?","text":"<ul> <li>Open an issue: https://github.com/msat1971/dclipse/issues</li> <li>Start a discussion: https://github.com/msat1971/dclipse/discussions</li> </ul>"},{"location":"integration/","title":"Integration Guide","text":"<p>This section explains how to integrate the generated code into your project, how exceptions are surfaced, and how logging works.</p> <ul> <li>Generated package layout and extension points</li> <li>Hooking your business logic into <code>adapter.py</code></li> <li>Entry points (<code>[project.scripts]</code> or <code>console_scripts</code>)</li> <li>Error handling and exception mapping</li> <li>Logging configuration and recommendations</li> </ul> <p>Detailed content coming soon.</p>"},{"location":"project/","title":"Project","text":"<p>This section describes the codebase and generated artifacts.</p> <ul> <li>Codebase overview (coming soon)</li> <li>Module layout (coming soon)</li> <li>Development workflow (coming soon)</li> </ul> <p>Contributions welcome! See CONTRIBUTING.md.</p>"},{"location":"schema/","title":"Dclipse JSON Schemas","text":"<p>Authoritative schemas are maintained under <code>src/dclipse/schema/</code> and mirrored here for documentation and GitHub Pages.</p> <ul> <li>Core schema: <code>dclipse.schema.1.0.0.json</code></li> <li>Style schema: <code>dclipse_style.schema.1.0.0.json</code></li> </ul> <p>Usage examples and references:</p> <ul> <li>Programmatic validation uses the packaged schemas via <code>importlib.resources</code> in <code>src/dclipse/schema.py</code>.</li> <li>Repo-level copies are also in <code>/schema/</code> for easy linking from the README and Wiki.</li> </ul> <p>To update these copies, run:</p> <pre><code>make schema-sync\n</code></pre> <p>CI and pre-commit will fail if these files are out of date relative to <code>src/dclipse/schema/</code>.</p>"}]}